<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>

<!-- ================= select 구간 ======================== -->

	<!--[han]-->
	<entry key="memberCount">
		SELECT COUNT(*) AS COUNT
		FROM MEMBER
		JOIN LOGIN_API USING(USER_ID)
		WHERE STATUS
	</entry>
	
	<!--[han]-->
	<entry key="userCountFilter">
		SELECT COUNT(*) AS COUNT
		FROM MEMBER
		WHERE STATUS
	</entry>
	
	
	<!--[han]  어드민 페이지용 멤버 조회 -->
	<entry key="selectMemberList">
		SELECT USER_ID, NICKNAME,  STATUS , COIN, ENROLL_DATE, API_KIND, CANCELLATION_DATE
		FROM (
		  SELECT USER_ID, NICKNAME,  STATUS , COIN, ENROLL_DATE, API_KIND, CANCELLATION_DATE, ROWNUM AS RN
		  FROM (
		    SELECT USER_ID, NICKNAME,  M.STATUS , COIN, ENROLL_DATE, API_KIND, CANCELLATION_DATE
		    FROM MEMBER M
            JOIN LOGIN_API USING(USER_ID)
            LEFT JOIN DISABLED_MEMBER USING(USER_ID)
		    WHERE M.STATUS IN AND API_KIND IN
		    ORDER BY ## DESC
		  )
		)
		WHERE RN BETWEEN ? AND ?
	</entry>
	
	<!--[han] 어드민 페이지용 멤버 조회 -->
	<entry key="searchMembers">
		SELECT USER_ID, 
				NICKNAME, 
				STATUS
		FROM (
		  SELECT USER_ID, 
				NICKNAME, 
				STATUS,
		        UTL_MATCH.EDIT_DISTANCE( ? , ## ) AS DISTANCE
		  FROM MEMBER
		  WHERE ## LIKE ? escape '\'
		)
		ORDER BY DISTANCE , ## 
	</entry>
	
	<!--[han] 어드민 페이지용 멤버 조회 -->
	<entry key="selectMemberAllInfo">
		SELECT USER_ID,
			   NICKNAME,
               M.STATUS,
			   SKIN_ID,
               COIN,
			   SELF_INFO,
			   GENDER,
               ENROLL_DATE,
               API_KIND,
               CANCELLATION_DATE
		FROM MEMBER M
		LEFT JOIN LOGIN_API USING(USER_ID)
        LEFT JOIN DISABLED_MEMBER USING(USER_ID)
		WHERE USER_ID = ?
	</entry>
	
	<!--[han] 어드민 페이지용 멤버 조회 -->
	<entry key="selectMemberForReport">
		SELECT M.USER_ID, M.NICKNAME, M.STATUS, USER_COUNT, RECEIVE_COUNT
		FROM MEMBER M
		LEFT JOIN (
		  SELECT USER_ID, COUNT(*) AS USER_COUNT
		  FROM REPORT
		  WHERE USER_ID = ?
		  GROUP BY USER_ID
		) UC ON M.USER_ID = UC.USER_ID
		LEFT JOIN (
		  SELECT RECEIVE_ID, COUNT(*) AS RECEIVE_COUNT
		  FROM REPORT
		  WHERE RECEIVE_ID = ?
		  GROUP BY RECEIVE_ID
		) RC ON M.USER_ID = RC.RECEIVE_ID
		WHERE M.USER_ID = ?
	</entry>
	
	<!-- [han] 어드민페이지용 15일 지난 탈퇴 유저 조회 -->
	<entry key="selectCancelMemberForAdmin">
		SELECT M.USER_ID, M.NICKNAME, CANCELLATION_DATE, USER_COUNT, RECEIVE_COUNT
		FROM MEMBER M
        LEFT JOIN DISABLED_MEMBER DM ON M.USER_ID = DM.USER_ID
		LEFT JOIN (
		  SELECT USER_ID, COUNT(*) AS USER_COUNT
		  FROM REPORT
		  GROUP BY USER_ID
		) UC ON M.USER_ID = UC.USER_ID
		LEFT JOIN (
		  SELECT RECEIVE_ID, COUNT(*) AS RECEIVE_COUNT
		  FROM REPORT
		  GROUP BY RECEIVE_ID
		) RC ON M.USER_ID = RC.RECEIVE_ID
		WHERE M.STATUS ='N' AND SYSDATE - CANCELLATION_DATE >= 15
        ORDER BY CANCELLATION_DATE
	</entry>
	
<!-- [han] 어드민용 삭제시킬 호감도 총 갯수 조회 -->
	<entry key="selectHeartForDel">
		SELECT COUNT(*) AS COUNT
		FROM HEART
		WHERE TRUNC(SYSDATE, 'iw') - 7  > CREATE_DATE 
	</entry>

	
	<!-- [혜린] -->
	<entry key="selectLoginUser">
		SELECT * 
		FROM MEMBER
		WHERE USER_ID = ?
	</entry>

	<!-- [혜린] -->
	<entry key="loginMember">
		SELECT * 
		FROM MEMBER
		WHERE USER_ID = ?
		  AND USER_PWD = ?
	</entry>
	
	<!-- [혜린] -->
	<entry key="checkKey">
		SELECT M.USER_ID,USER_PWD,NICKNAME,STATUS,SKIN_ID,COIN,SELF_INFO,GENDER,ENROLL_DATE
		FROM MEMBER M, LOGIN_API A
		WHERE M.USER_ID = A.USER_ID 
		AND API_KIND = ?
		AND API_KEY = ?
	</entry>

	<!-- [혜린] -->
	<entry key = "loginApi">
		SELECT *
		FORM LOGIN_API
		WHERE API_KEY = ?
	</entry>
	
	<!-- [혜린] -->
	<entry key="checkId">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE USER_ID = ?
	</entry>
	
	<!-- [혜린] -->
	<entry key="checkNick">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE NICKNAME = ?
	</entry>
	
	<!-- [가영] 유저 정보 불러오기 -->
	<entry key="selectMember">
		SELECT USER_ID,
			   NICKNAME,
			   SKIN_ID,
			   SELF_INFO,
			   GENDER
		FROM MEMBER
		JOIN CHARACTER_SKIN USING(SKIN_ID)
		WHERE USER_ID = ?
	</entry>
	
	<!-- [가영] 호감도 총 갯수 조회 -->
	<entry key="selectHeart">
		SELECT COUNT(*) AS COUNT
		FROM HEART
		WHERE CREATE_DATE >= TRUNC(SYSDATE, 'iw')
		  AND USER_ID = ?
		  AND RECEIVE_ID =?
	</entry>
	
	<!-- [가영] 친구 조회 -->
	<entry key="selectFriend">
		SELECT COUNT(*) 
		FROM FRIEND
		WHERE USER_ID = ?
		  AND FRIEND_ID =?
	</entry>
	
	
	<!-- [지영] 차단유저 조회 -->
	<entry key="blockCheck">
		SELECT STATUS
		FROM MEMBER
		WHERE USER_ID = ?
	</entry>


	<!-- [지의] 유저별 호감도 총 개수 -->
	<entry key="countHeart">
 		SELECT COUNT(*) AS COUNT
		FROM HEART
		WHERE RECEIVE_ID = ?
		  AND CREATE_DATE >= TRUNC(SYSDATE, 'iw')
	</entry>
	
	<!-- 호감도 랭킹 조회 -->
	<entry key="selectRanking">
		 SELECT USER_ID, NICKNAME, SKIN_ID, SAVE_ROOT, COUNT, RANK
 		 FROM ( SELECT RECEIVE_ID , COUNT,  RANK() OVER (ORDER BY COUNT DESC) RANK 
         FROM ( SELECT RECEIVE_ID , COUNT(*) AS COUNT FROM HEART
         		WHERE CREATE_DATE &lt; TRUNC(SYSDATE, 'iw')
                  AND CREATE_DATE >=  TRUNC(SYSDATE, 'iw') - 7
                GROUP BY RECEIVE_ID )
         ORDER BY RANK, RECEIVE_ID )
		 JOIN MEMBER ON RECEIVE_ID = USER_ID
		 JOIN CHARACTER_SKIN USING(SKIN_ID)
 		 WHERE RANK &lt;= 3
	</entry>
	
	<!-- [지의] 친구유저 닉네임 조회 -->
	<entry key="friendNickName">
		SELECT NICKNAME
		  FROM MEMBER
		 WHERE USER_ID = ?
	</entry>
	
	
	
<!-- ================= insert 구간 ======================== -->
	<!-- [혜린] -->
	<entry key="insertMember">
		INSERT INTO MEMBER( USER_ID,
							USER_PWD,
							NICKNAME)
					VALUES (?,
							?,
							?)
	</entry>

	<!-- [혜린] -->
	<entry key = "insertKey">
		INSERT INTO LOGIN_API(USER_ID,
							  API_KIND,
							  API_KEY)
					   VALUES(?,
					   		  ?,
					   		  ?)
	</entry>
	
	<!-- [혜린] -->
	<entry key="insertDltMember">
		INSERT INTO DISABLED_MEMBER
					(USER_ID,
					 STATUS)
			 VALUES(?,
			 		?)
	</entry>
	
	<!-- [혜린] -->
	<entry key="insertCharacter">
	INSERT INTO CHARACTER
					(USER_ID,
					SKIN_ID)
			 VALUES(?,
			 		'0')
	</entry>
	
	<!-- [가영] 호감도 추가 -->
	<entry key="insertHeart">
		INSERT INTO HEART(USER_ID, RECEIVE_ID)
		VALUES (?, ?)
	</entry>
	
	<!-- [가영] 친구 추가 -->
	<entry key="insertFriend">
		INSERT INTO FRIEND(USER_ID, FRIEND_ID)
		VALUES (?, ?)
	</entry>
	
<!-- ================= update 구간 ======================== -->
<!-- [혜린] -->
	<entry key = "updatePwd">
		UPDATE MEMBER
		   SET USER_PWD = ?
		 WHERE USER_ID = ?
	</entry>
	
<!-- [혜린] -->
	<entry key = "updateStatus">
		UPDATE MEMBER
		   SET STATUS = ?
		 WHERE USER_ID = ?
	</entry>
	
<!-- [han] 관리자 페이지용-->
	<entry key = "updateMemberInfo">
		UPDATE MEMBER
		   SET COIN =  ?,
				SELF_INFO = ?
		 WHERE USER_ID = ?
	</entry>
<!-- [혜린] -->
	<entry key = "updateMember">
	UPDATE MEMBER
		   SET NICKNAME = ?,
                USER_PWD = ?,
                SELF_INFO = ?,
                GENDER = ?
		 WHERE USER_ID = ?
	</entry>

<!-- [혜린] -->
	<entry key = "updateNPwd">
	UPDATE MEMBER
		   SET NICKNAME = ?,
                SELF_INFO = ?,
                GENDER = ?
		 WHERE USER_ID = ?
	</entry>
	

<!-- [지영] -->
	<entry key = "coinUpdate">
	UPDATE MEMBER
		   SET COIN = COIN + ?
		 WHERE USER_ID = ?
	</entry>


<!-- ================= delete 구간 ======================== -->
<!-- [혜린] -->
	<entry key = "dltMemBoard">
		DELETE FROM BOARD
		 WHERE USER_ID = ?
		    OR RECEIVE_ID = ?
	</entry>
	<entry key = "dltMemChatting">
		DELETE FROM CHATTING
		 WHERE USER_ID = ?
		    OR RECEIVE_ID = ?
	</entry>
	<entry key = "dltMemHeart">
		DELETE FROM HEART
		 WHERE USER_ID = ?
		    OR RECEIVE_ID = ?
	</entry>
<!-- [혜린] -->
	<entry key = "dltMemCharacter">
		DELETE FROM CHARACTER
		 WHERE USER_ID = ?
	</entry>
	<entry key = "dltMemFriend">
		DELETE FROM FRIEND
		 WHERE USER_ID = ?
		 	OR FRIEND_ID = ?
	</entry>
	<entry key = "dltMemApi">
		DELETE FROM LOGIN_API
		 WHERE USER_ID = ?
	</entry>
	
	<entry key = "dltMemChattingRoom">
		DELETE FROM CHATTINGROOM
		 WHERE USER_ID = ?
		    OR RECEIVE_ID = ?
	</entry>
	

<!-- [han] -->
	<entry key="deleteMember">
		DELETE FROM MEMBER WHERE USER_ID =  ?
	</entry>
	
<!-- [han] -->
	<entry key="deleteDltMember">
		DELETE FROM DISABLED_MEMBER WHERE USER_ID =  ?
	</entry>

<!-- [han] 어드민페이지용 15일 지난 탈퇴 유저 일괄 삭제 -->
	<entry key="deleteCancelMemberForAdmin">
		DELETE FROM ( SELECT USER_ID,  M.STATUS,  CANCELLATION_DATE
            FROM MEMBER M
            LEFT JOIN DISABLED_MEMBER USING(USER_ID))
		WHERE STATUS ='N' AND SYSDATE - CANCELLATION_DATE >= 15
	</entry>
	
<!-- [han] 어드민용 랭킹집계에 쓰이지 않는 호감도 일괄삭제 -->
	<entry key="deleteHeartListForAdmin">
		DELETE FROM HEART
		WHERE TRUNC(SYSDATE, 'iw') - 7  > CREATE_DATE 
	</entry>
	
	<!-- [가영] 호감도 삭제 -->
	<entry key="deleteHeart">
		DELETE FROM HEART
		WHERE CREATE_DATE >= TRUNC(SYSDATE, 'iw')
		  AND USER_ID = ?
		  AND RECEIVE_ID =?
	</entry>
	
	<!-- [가영] 친구 삭제 -->
	<entry key="deleteFriend">
		DELETE FROM FRIEND
		WHERE USER_ID = ?
		  AND FRIEND_ID =?
	</entry>

</properties>